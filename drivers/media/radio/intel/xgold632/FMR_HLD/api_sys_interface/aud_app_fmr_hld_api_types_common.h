/*
 * Copyright (C) 2012-2013 Intel Mobile Communications GmbH
 *
 * This software is licensed under the terms of the GNU General Public
 * License version 2, as published by the Free Software Foundation, and
 * may be copied, distributed, and modified under those terms.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */

/*
** ============================================================================
**
**				MODULE DESCRIPTION
**
** ============================================================================
*/

/*
* @file aud_app_fmr_hld_api_types_common.h
*
* Contains the common type defines for both RX and TX
*
*/

#ifndef AUD_APP_FMR_HLD_API_TYPES_COMMON_H
#define AUD_APP_FMR_HLD_API_TYPES_COMMON_H

/*
** ============================================================================
**
**				INCLUDE STATEMENTS
**
** ============================================================================
*/

#include <types.h>

/* Make the s16 unit in dBuV (1) / dBm (0) by enabling this
 * definition.
 */
#if !defined(FMTRX_RSSI_IN_DBUV)
/* #warning FMTRX_RSSI_IN_DBUV not specified in Makefile. Default = 1 */
#define FMTRX_RSSI_IN_DBUV 1
#endif


/*
 * @brief
 * PI
 */
#define C_PI (3.14159265359)

/*
 * @brief
 * Enumeration for frequency units
 */
enum fmtrx_unit {
	DKHZ  = 100,	/* 0.1 KHz */
	KHZ   = 1000,	/* 1000 */
	DMHZ  = 100000, /* 0.1 M */
	MHZ   = 1000000 /* 1M */
};


/*
 * @brief
 * Enumeration for Max and Min RSSI levels
 */
enum fmtrx_rssi_range {
	RSSI_MAX =  32767,   /* maximam RSSI assumed is  32767 / 4 dBuV */
	RSSI_MIN = -10000    /* minimum RSSI assumed is -10000 / 4 dBuV */
};

/*
 * @brief
 * RDS working mode, RDS / RBDS.
 */
enum fmtrx_rds_mode {
	FMR_RDS = 0,  /* RDS mode, block E is not recognised */
	FMR_RBDS = 1, /* RBDS mode, block E is recognised but ignored */
};


/*
 * @brief
 * Deemphasis mode, 50us / 75 us.
 */

enum fmtrx_emph_sel {
	FMR_50US = 0, /* 50 microseconds time constant */
	FMR_75US = 1  /* 75 microseconds time constant */
};


/*
 * @brief
 * Working mode when subscribing the RDS
 */
enum fmtrx_subscribe_rds_mode {
	RDS_MODE_POLL = 0,  /* Polling mode */
	RDS_MODE_IRQ = 1   /* Interrupt mode */
};

/*
 * @brief
 * Antenna type of FM Radio RX
 */
enum fmtrx_ant_type {
	FMR_ANT_EBD_DE,
	FMR_ANT_HS_SE,
	FMR_ANT_TYPE_END
};

/*
 * @brief
 * Antenna selftest result
 */
enum fmtrx_ant_selftest_res {
	FMR_ANT_SELFTEST_OK		= 0,
	FMR_ANT_SELFTEST_FAILED_FATAL	= 1,
	FMR_ANT_SELFTEST_NOT_SUPPORTED	= 2
};


/*
 * @brief
 * RSSI report element from FMR seek/evaluate
 */
struct fmtrx_rssi_report {
	u32 freq;	/* Frequency being reported */
	s16 rssi;	/* Reported signal strength */
};


/*
 * @brief
 * Revision information of all the FMRadio driver components
 */
struct fmtrx_revision {
	u32 hw_id;		/* Hardware ID */
	u32 fw_id;		/* Firmware ID */
	u32 fw_timestamp;	/* Firmware Timestamp */
	u32 lld_id;		/* Low Level Driver ID */
	u32 hld_id;		/* High Level Driver ID */
	u32 pkg_id;		/* Overall Software Package ID */
};

/*
 * @brief
 * The configuration of sine wave (tone) generated by mini DSP FW
 */
struct fmtrx_test_sine_cfg {
	/* Frequency of the sine wave generated internally, 0~15 KHz. */
	u16 freq;
	/* Amplitude of the sine wave generated internally, 0~32767 */
	u16 ampl;
	u32 phase; /* Starting phase of the sine wave */
};

/*
 * @brief
 * FM Radio HW state
 */
enum fmtrx_hw_state {
	FMTRX_HW_STATE_IDLE,
	FMTRX_HW_STATE_RX_ACTIVE,
	FMTRX_HW_STATE_SEEK_ACTIVE,
	FMTRX_HW_STATE_INVALID
};

/*
 * Enumeration to reflect the state of the FMTRX STATE
 */
enum fmtrx_init_state {
	FMTRX_INIT_STATE_UNINITIALISED,
	FMTRX_INIT_STATE_INITIALISED,
	FMTRX_INIT_STATE_INVALID
};

/*
 * @brief
 * Enumeration for identifying the initialisation mode for init functions.
 */
enum fmtrx_init_mode {
	FMTRX_INIT_MODE_ON,	/* Used at module start-up/initialisation */
	FMTRX_INIT_MODE_OFF,	/* Used at module shut-down/de-init */
	FMTRX_INIT_MODE_INVALID
};

/*
 * @brief
 * Enumeration for access types
 */
enum fmtrx_addr_access_type {
	FMTRX_16BIT_ACCESS,	/* 16 bit access */
	FMTRX_32BIT_ACCESS,	/* 32 bit access */
	FMTRX_ACCESS_INVALID
};

/* FM Radio Module Identifiers */
enum fmtrx_mod_type {
	FMR_MODULE_FMRX,
	FMR_MODULE_SYS,
	FMR_MODULE_INVALID
};

/* core dump section */
struct fmtrx_dump_seg {
	char *name; /* "start address++size" */
	u32 addr_start;  /* start address of the dump section */
	u32 size; /* size of the dump section */
};

/*
 * @brief
 * core dump descriptor
 */
struct fmtrx_core_dump {
	struct fmtrx_dump_seg *dump_seg; /* point to dump segments */
	u8 count; /* number of memory sections */
};

/*
 * @brief
 * FM Radio IDI handshake parameters
 */
struct fmrtrx_set_id_hs_params {
	s32 enable; /* true to enable, false otherwise. */
};

/*
 * @brief
 * FM Radio Register access
 */
struct fmtrx_reg_data {
	u32 reg_addr; /* true to enable, false otherwise. */
	s32 *reg_data; /* true to enable, false otherwise. */
	/* Register type - 16bit or 32bit */
	enum fmtrx_addr_access_type reg_type;
};

/*
 * @brief
 * FM Radio RDS data report
 */
struct fmtrx_rds_report {
	void *rpt_array;/* Array of reports */
	u8 *rpt_cnt;	/* Valid number of reports */
	u16 array_len;	/* Max number of reports */
};

/*
 * @brief
 * FM Radio auto seek data report
 */
struct fmtrx_as_report {
	void *rpt_array;/* Array of reports */
	u8 *rpt_cnt;	/* Valid number of reports */
	u8 array_len;	/* Max number of reports */
};

/** FM Radio RDS buff descriptor */
struct fmtrx_rds_buff_t {
	void *buf;
	u16 size;
	dma_addr_t dma_handle;
};

#endif
