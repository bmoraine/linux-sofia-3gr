/**
 * -------------------------------------------------------------------------
 *  Copyright (C) 2013 Intel Mobile Communications GmbH
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
 *
 */

#ifndef _SW_FUEL_GAUGE_DEBUG_H
#define _SW_FUEL_GAUGE_DEBUG_H

#include <linux/ktime.h>

/* Size of debug data array (has to be power of 2!!!) */
#define SW_FUEL_GAUGE_DEBUG_DATA_SIZE (1<<6)

/* Enables verbose printk logging. Remove this define for release builds. */
#define SW_FUEL_GAUGE_DEBUG_LOG_ENABLE
#ifdef SW_FUEL_GAUGE_DEBUG_LOG_ENABLE
/** Macro to trace and log debug data internally.
 * Jiffy resolution is adequate for SW Fuel Gauge
 */
#define SW_FUEL_GAUGE_DEBUG(_array, _event, _param) \
do { \
	SW_FUEL_GAUGE_DEBUG_NO_PRINTK(_array, _event, _param) \
	if (_array.printk_logs_en)\
		pr_debug("%s 0x%lx  dec=%d\n", \
			#_event, (unsigned long)_param, (int)_param); \
} while (0)
#else
#define SW_FUEL_GAUGE_DEBUG(_array, _event, _param) \
	SW_FUEL_GAUGE_DEBUG_NO_PRINTK(_array, _event, _param)
#endif

/**
 * Macro to log debug data internally, without tracing, for use
 * in interrupt handlers and within spinlocked sections.
 * Jiffy resolution is adequate for SW Fuel Gauge
 */
#define SW_FUEL_GAUGE_DEBUG_NO_PRINTK(_array, _event, _param) \
{ \
	unsigned long flags; \
	spin_lock_irqsave(&_array.lock, flags); \
	_array.log_array[_array.index].time_stamp = jiffies; \
	_array.log_array[_array.index].event = (_event); \
	_array.log_array[_array.index].param = (int)(_param); \
	_array.index++; \
	_array.index &= (SW_FUEL_GAUGE_DEBUG_DATA_SIZE-1); \
	spin_unlock_irqrestore(&_array.lock, flags); \
}

/** Events for use in debug and tracing. */
enum sw_fuel_gauge_debug_event {
	/* External interface events. */
	SW_FUEL_GAUGE_DEBUG_INIT,
	SW_FUEL_GAUGE_DEBUG_EXIT,
	SW_FUEL_GAUGE_DEBUG_PROBE,
	SW_FUEL_GAUGE_DEBUG_REMOVE,
	SW_FUEL_GAUGE_DEBUG_SUSPEND,
	SW_FUEL_GAUGE_DEBUG_RESUME,

	SW_FUEL_GAUGE_DEBUG_REGISTER_HAL,
	SW_FUEL_GAUGE_DEBUG_REGISTER_HAL_WORK,
	SW_FUEL_GAUGE_DEBUG_BAT_NOTIFICATION_INSERTED,
	SW_FUEL_GAUGE_DEBUG_BAT_NOTIFICATION_REMOVED,
	SW_FUEL_GAUGE_DEBUG_BAT_NOTIFICATION_UNKNOWN,
	SW_FUEL_GAUGE_DEBUG_CHARGER_TARGET_MV,

	SW_FUEL_GAUGE_DEBUG_GET_PROPERTY,
	SW_FUEL_GAUGE_DEBUG_GET_PROPERTY_VALUE,
	SW_FUEL_GAUGE_DEBUG_GET_PROPERTY_ERROR,

	SW_FUEL_GAUGE_DEBUG_SET_PROPERTY,
	SW_FUEL_GAUGE_DEBUG_SET_PROPERTY_VALUE,
	SW_FUEL_GAUGE_DEBUG_SET_PROPERTY_ERROR,

	SW_FUEL_GAUGE_DEBUG_SET_PROPERTY_STATUS,
	SW_FUEL_GAUGE_DEBUG_SET_PROPERTY_HEALTH,
	SW_FUEL_GAUGE_DEBUG_SET_PROPERTY_PRESENCE,
	SW_FUEL_GAUGE_DEBUG_SET_PROPERTY_CAPACITY,
	SW_FUEL_GAUGE_DEBUG_SET_PROPERTY_TEMPERATURE,
	SW_FUEL_GAUGE_DEBUG_SET_PROPERTY_TEMPERATURE_INVALID,
	SW_FUEL_GAUGE_DEBUG_SET_PROPERTY_CHARGE_FULL_DESIGN,
	SW_FUEL_GAUGE_DEBUG_SET_PROPERTY_VOLTAGE_NOW,
	SW_FUEL_GAUGE_DEBUG_SET_PROPERTY_TECHNOLOGY,

	/* SW Fuel Gauge state machine operations. */
	SW_FUEL_GAUGE_DEBUG_STM_STATE_WAIT_FOR_INITIAL_SOC,
	SW_FUEL_GAUGE_DEBUG_STM_STATE_WAIT_FOR_SOC_UPDATE,
	SW_FUEL_GAUGE_DEBUG_STM_STATE_WAIT_FOR_BATTERY_RELAXED,
	SW_FUEL_GAUGE_DEBUG_STM_STATE_WAIT_FOR_OCV,
	SW_FUEL_GAUGE_DEBUG_STM_STATE_OCV_RECEIVED,

	/* SW Fuel Gauge state machine operations. */
	SW_FUEL_GAUGE_DEBUG_STM_EVENT_INITIAL_SOC_REPORT_DONE,
	SW_FUEL_GAUGE_DEBUG_STM_EVENT_BATTERY_NOLONGER_RELAXED,
	SW_FUEL_GAUGE_DEBUG_STM_EVENT_BATTERY_RELAXED,
	SW_FUEL_GAUGE_DEBUG_STM_EVENT_SOC_UPDATE,
	SW_FUEL_GAUGE_DEBUG_STM_EVENT_OCV_MEAS_DONE,
	SW_FUEL_GAUGE_DEBUG_STM_EVENT_OCV_DONE,
	SW_FUEL_GAUGE_DEBUG_STM_EVENT_EOC,
	SW_FUEL_GAUGE_DEBUG_STM_EVENT_SYSTEM,
	SW_FUEL_GAUGE_DEBUG_WARNING_EOC_TOO_EARLY,
	SW_FUEL_GAUGE_DEBUG_WARNING_EOC_NOT_FULL_CHARGE,

	/* Internal operations. */
	SW_FUEL_GAUGE_DEBUG_EXECUTE_FUNCTION,
	SW_FUEL_GAUGE_DEBUG_EXECUTE_PARAM,

	SW_FUEL_GAUGE_DEBUG_ENQUEUE_FUNCTION,
	SW_FUEL_GAUGE_DEBUG_ENQUEUE_PARAM,

	SW_FUEL_GAUGE_DEBUG_BAT_NOT_FITTED,
	SW_FUEL_GAUGE_DEBUG_BAT_ID_TYPE,
	SW_FUEL_GAUGE_DEBUG_BAT_REPORT_REPEATED,
	SW_FUEL_GAUGE_DEBUG_BAT_CHANGED,

	SW_FUEL_GAUGE_DEBUG_DELTA_THRESHOLD_REACHED,
	SW_FUEL_GAUGE_DEBUG_BATTERY_RELAXED,
	SW_FUEL_GAUGE_DEBUG_BATTERY_NOT_RELAXED,
	SW_FUEL_GAUGE_DEBUG_BATTERY_RELAXED_STILL,
	SW_FUEL_GAUGE_DEBUG_BATTERY_NOLONGER_RELAXED,
	SW_FUEL_GAUGE_DEBUG_CONFIGURED_HAL,
	SW_FUEL_GAUGE_DEBUG_IBAT_AVG_RELAXED_LIM,
	SW_FUEL_GAUGE_DEBUG_IBAT_NOW_RELAXED_LIM,
	SW_FUEL_GAUGE_DEBUG_RAW_CC_BAT_CAP_PERMIL,
	SW_FUEL_GAUGE_DEBUG_CC_ERROR_PERMIL,
	SW_FUEL_GAUGE_DEBUG_CALC_INITIAL_CAPACITY,
	SW_FUEL_GAUGE_DEBUG_CALC_CAPACITY,
	SW_FUEL_GAUGE_DEBUG_IBAT_SHORT_TOO_HIGH,
	SW_FUEL_GAUGE_DEBUG_IBAT_LONG_NOT_READY,
	SW_FUEL_GAUGE_DEBUG_IMMEDIATE_AGE_SEC,
	SW_FUEL_GAUGE_DEBUG_IMMEDIATE_ERROR_PERMIL,
	SW_FUEL_GAUGE_DEBUG_OCV_BAT_CAP_PERMIL,
	SW_FUEL_GAUGE_DEBUG_OCV_ERROR_PERMIL,
	SW_FUEL_GAUGE_DEBUG_OCV_BASED_SOC_CALIBRATION,

	SW_FUEL_GAUGE_DEBUG_CC_BALANCED_MC,
	SW_FUEL_GAUGE_DEBUG_CC_DOWN_MC,
	SW_FUEL_GAUGE_DEBUG_CC_UP_MC,
	SW_FUEL_GAUGE_DEBUG_CC_RTC_SEC,

	SW_FUEL_GAUGE_DEBUG_HAL_CB_EVENT,
	SW_FUEL_GAUGE_DEBUG_HAL_CB_PARAM,

	SW_FUEL_GAUGE_DEBUG_NVM_BATTERY_REMOVED,
	SW_FUEL_GAUGE_DEBUG_NVM_OUT_OF_DATE,
	SW_FUEL_GAUGE_DEBUG_NVM_DEFERRED_NEWER,
	SW_FUEL_GAUGE_DEBUG_NVM_IMMEDIATE_NEWER,

	SW_FUEL_GAUGE_DEBUG_TBAT_SATURATED_PSU,
	SW_FUEL_GAUGE_DEBUG_TBAT_ERROR,

	SW_FUEL_GAUGE_DEBUG_TBAT_MODEL_UL,
	SW_FUEL_GAUGE_DEBUG_TBAT_MODEL_LL,

	/* HAL Set function events. */
	SW_FUEL_GAUGE_DEBUG_HAL_SET_DELTA_THRESHOLD_MC,
	SW_FUEL_GAUGE_DEBUG_HAL_REQUESTED_DELTA_THRESHOLD_MC,
	SW_FUEL_GAUGE_DEBUG_HAL_RESET_ACCUMULATED_ERROR,
	SW_FUEL_GAUGE_DEBUG_HAL_RESET_IBAT_AVERAGES,

	/* HAL Get function events. */
	SW_FUEL_GAUGE_DEBUG_HAL_CC_UP_COUNTS,
	SW_FUEL_GAUGE_DEBUG_HAL_CC_DOWN_COUNTS,
	SW_FUEL_GAUGE_DEBUG_HAL_GET,
	SW_FUEL_GAUGE_DEBUG_HAL_GET_DELTA_THRESHOLD_MC,
	SW_FUEL_GAUGE_DEBUG_HAL_GET_DELTA_THRESHOLD_FAILED,
	SW_FUEL_GAUGE_DEBUG_HAL_GET_ACCUMULATED_ERROR,
	SW_FUEL_GAUGE_DEBUG_HAL_GET_BALANCED_CC_MC,
	SW_FUEL_GAUGE_DEBUG_HAL_GET_CC_DOWN_MC,
	SW_FUEL_GAUGE_DEBUG_HAL_GET_CC_UP_MC,
	SW_FUEL_GAUGE_DEBUG_HAL_GET_IBAT_LONG_AV_MA,
	SW_FUEL_GAUGE_DEBUG_HAL_GET_IBAT_LONG_AV_LATCHED_MA,
	SW_FUEL_GAUGE_DEBUG_HAL_GET_IBAT_LONG_AV_FAILED,
	SW_FUEL_GAUGE_DEBUG_HAL_GET_IBAT_SHORT_AV_MA,
	SW_FUEL_GAUGE_DEBUG_HAL_GET_IBAT_SHORT_AV_LATCHED_MA,

	/* HAL Initialisation and de-initialisation functions. */
	SW_FUEL_GAUGE_DEBUG_HAL_INIT,
	SW_FUEL_GAUGE_DEBUG_HAL_EXIT,
	SW_FUEL_GAUGE_DEBUG_HAL_PROBE,
	SW_FUEL_GAUGE_DEBUG_HAL_REMOVE,
	SW_FUEL_GAUGE_DEBUG_HAL_SUSPEND,
	SW_FUEL_GAUGE_DEBUG_HAL_RESUME,
	SW_FUEL_GAUGE_DEBUG_HAL_IOREMAP,
	SW_FUEL_GAUGE_DEBUG_HAL_CC_SCALE_UC,
	SW_FUEL_GAUGE_DEBUG_HAL_CC_THRESHOLD_SCALE_MC,

	/* HAL internal operations. */
	SW_FUEL_GAUGE_DEBUG_HAL_IBAT_LONG_SEC,
	SW_FUEL_GAUGE_DEBUG_HAL_TIMER_EXPIRED,
	SW_FUEL_GAUGE_DEBUG_HAL_CC_DELTA_IRQ,
	SW_FUEL_GAUGE_DEBUG_HAL_PROCESS_IRQ_AND_TIMER_WORK,
	SW_FUEL_GAUGE_DEBUG_HAL_UPDATE_IBAT_REF_SEC,
	SW_FUEL_GAUGE_DEBUG_HAL_UPDATE_IBAT_NEXT_SEC
};

/**
 * struct sw_fuel_gauge_debug_data - Structure to collect debug data
 * @lock		Spinlock for atomic access
 * @index		Index of logging array
 * @log_array		Debug data logging array
 * @time_stamp	System Time Stamp in Jiffies
 * @event		Event which occurred
 * @param		General purpose parameter
 */
struct sw_fuel_gauge_debug_data {
	spinlock_t	lock;
	int		printk_logs_en;
	u32		index;
	struct {
		u32				time_stamp;
		enum sw_fuel_gauge_debug_event	event;
		int				param;
	} log_array[SW_FUEL_GAUGE_DEBUG_DATA_SIZE];
};

#endif /* _SW_FUEL_GAUGE_DEBUG_H */
